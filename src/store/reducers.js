import { createSlice } from "@reduxjs/toolkit"; // Import the createSlice function from Redux Toolkit

// Define the initial state for todos
const initialTodoState = {
    nextId: 2, // The next available ID for new todo items (used to ensure uniqueness)
    data: {
        1: {
            content: 'Content 1', // Default task content
            completed: false, // Sample completion status (false = not completed)
        },
    },
};

// Create a slice of the Redux store using the createSlice function
const addTodoReducer = createSlice({
    name: "Todos", // The name of the slice (useful when combining multiple reducers)
    initialState: initialTodoState, // The initial state for the slice (contains todos)
    reducers: {
        // Contains reducer functions for handling actions

        addTodos: (state, action) => {
            // The addTodos reducer function handles adding new todos to the state

            const newId = state.nextId; // Get the next available ID for the new todo item
            // Add a new todo item to the `data` object using the next ID as the key
            state.data[newId] = {
                content: action.payload.content, // Get the content from the dispatched action
                completed: false, // Set the completed status to false by default
            };
            state.nextId++; // Increment the nextId
        },

        removeTodos: (state, action) => {
            // The removeTodos reducer function handles removing todos from the state
            const todoId = action.payload;
            delete state.data[todoId]; // Remove the todo with the given ID from the state
        },

        editTodos: (state, action) => {
            // The editTodos reducer function handles editing todos in the state
            let todoId = action.payload.id;
            if (state.data[todoId]) {
                state.data[todoId] = {
                    content: action.payload.content,
                    completed: false,
                };
            } 

        },

        completeTodo: (state, action) => {
            // The completeTodo reducer function handles marking todos as completed in the state
            let todoId = action.payload.id;
            state.data[todoId].completed = action.payload.completed;
        },
    },
});

// Extract the action creators from the slice and export them
export const { addTodos, removeTodos, editTodos, completeTodo } = addTodoReducer.actions;

// Export the reducer function generated by createSlice and display in the Redux store
const reducer = addTodoReducer.reducer;
export default reducer;
